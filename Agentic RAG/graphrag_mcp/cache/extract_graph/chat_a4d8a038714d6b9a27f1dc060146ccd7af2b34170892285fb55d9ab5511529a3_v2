{"result": {"id": "chatcmpl-ByDyWud5XlJtIJeGkC9iZEb9WiXXW", "choices": [{"finish_reason": "stop", "index": 0, "logprobs": null, "message": {"content": "(\"entity\"<|>PLANNERAGENT<|>ORGANIZATION<|>PlannerAgent is an agent responsible for planning web searches using a specific model and output type<|>9)\n##\n(\"entity\"<|>SEARCH AGENT<|>ORGANIZATION<|>Search agent is an agent tasked with performing web searches and summarizing results concisely<|>9)\n##\n(\"entity\"<|>WRITERAGENT<|>ORGANIZATION<|>WriterAgent is an agent responsible for writing detailed research reports based on initial research<|>9)\n##\n(\"entity\"<|>WEBSEARCHITEM<|>ORGANIZATION<|>WebSearchItem is a model that defines the structure for a web search, including the reason and query<|>8)\n##\n(\"entity\"<|>WEBSEARCHPLAN<|>ORGANIZATION<|>WebSearchPlan is a model that outlines a list of web searches to perform<|>8)\n##\n(\"entity\"<|>REPORTDATA<|>ORGANIZATION<|>ReportData is a model that contains a short summary, a markdown report, and follow-up questions<|>8)\n##\n(\"relationship\"<|>PLANNERAGENT<|>WEBSEARCHPLAN<|>PlannerAgent uses WebSearchPlan to organize and execute web searches<|>7)\n##\n(\"relationship\"<|>SEARCH AGENT<|>WEBSEARCHITEM<|>Search agent uses WebSearchItem to perform web searches and summarize results<|>7)\n##\n(\"relationship\"<|>WRITERAGENT<|>REPORTDATA<|>WriterAgent generates ReportData based on summarized search results<|>7)\n##\n(\"relationship\"<|>PLANNERAGENT<|>SEARCH AGENT<|>PlannerAgent coordinates with Search agent to perform planned web searches<|>6)\n##\n(\"relationship\"<|>SEARCH AGENT<|>WRITERAGENT<|>Search agent provides summarized search results to WriterAgent for report generation<|>6)\n<|COMPLETE|>", "refusal": null, "role": "assistant", "annotations": [], "audio": null, "function_call": null, "tool_calls": null}}], "created": 1753693100, "model": "gpt-4o-2024-08-06", "object": "chat.completion", "service_tier": "default", "system_fingerprint": "fp_a288987b44", "usage": {"completion_tokens": 423, "prompt_tokens": 2857, "total_tokens": 3280, "completion_tokens_details": {"accepted_prediction_tokens": 0, "audio_tokens": 0, "reasoning_tokens": 0, "rejected_prediction_tokens": 0}, "prompt_tokens_details": {"audio_tokens": 0, "cached_tokens": 1664}}}, "input": {"messages": [{"content": "\n-Goal-\nGiven a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.\n \n-Steps-\n1. Identify all entities. For each identified entity, extract the following information:\n- entity_name: Name of the entity, capitalized\n- entity_type: One of the following types: [organization,person,geo,event]\n- entity_description: Comprehensive description of the entity's attributes and activities\nFormat each entity as (\"entity\"<|><entity_name><|><entity_type><|><entity_description>)\n \n2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.\nFor each pair of related entities, extract the following information:\n- source_entity: name of the source entity, as identified in step 1\n- target_entity: name of the target entity, as identified in step 1\n- relationship_description: explanation as to why you think the source entity and the target entity are related to each other\n- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity\n Format each relationship as (\"relationship\"<|><source_entity><|><target_entity><|><relationship_description><|><relationship_strength>)\n \n3. Return output in English as a single list of all the entities and relationships identified in steps 1 and 2. Use **##** as the list delimiter.\n \n4. When finished, output <|COMPLETE|>\n \n######################\n-Examples-\n######################\nExample 1:\nEntity_types: ORGANIZATION,PERSON\nText:\nThe Verdantis's Central Institution is scheduled to meet on Monday and Thursday, with the institution planning to release its latest policy decision on Thursday at 1:30 p.m. PDT, followed by a press conference where Central Institution Chair Martin Smith will take questions. Investors expect the Market Strategy Committee to hold its benchmark interest rate steady in a range of 3.5%-3.75%.\n######################\nOutput:\n(\"entity\"<|>CENTRAL INSTITUTION<|>ORGANIZATION<|>The Central Institution is the Federal Reserve of Verdantis, which is setting interest rates on Monday and Thursday)\n##\n(\"entity\"<|>MARTIN SMITH<|>PERSON<|>Martin Smith is the chair of the Central Institution)\n##\n(\"entity\"<|>MARKET STRATEGY COMMITTEE<|>ORGANIZATION<|>The Central Institution committee makes key decisions about interest rates and the growth of Verdantis's money supply)\n##\n(\"relationship\"<|>MARTIN SMITH<|>CENTRAL INSTITUTION<|>Martin Smith is the Chair of the Central Institution and will answer questions at a press conference<|>9)\n<|COMPLETE|>\n\n######################\nExample 2:\nEntity_types: ORGANIZATION\nText:\nTechGlobal's (TG) stock skyrocketed in its opening day on the Global Exchange Thursday. But IPO experts warn that the semiconductor corporation's debut on the public markets isn't indicative of how other newly listed companies may perform.\n\nTechGlobal, a formerly public company, was taken private by Vision Holdings in 2014. The well-established chip designer says it powers 85% of premium smartphones.\n######################\nOutput:\n(\"entity\"<|>TECHGLOBAL<|>ORGANIZATION<|>TechGlobal is a stock now listed on the Global Exchange which powers 85% of premium smartphones)\n##\n(\"entity\"<|>VISION HOLDINGS<|>ORGANIZATION<|>Vision Holdings is a firm that previously owned TechGlobal)\n##\n(\"relationship\"<|>TECHGLOBAL<|>VISION HOLDINGS<|>Vision Holdings formerly owned TechGlobal from 2014 until present<|>5)\n<|COMPLETE|>\n\n######################\nExample 3:\nEntity_types: ORGANIZATION,GEO,PERSON\nText:\nFive Aurelians jailed for 8 years in Firuzabad and widely regarded as hostages are on their way home to Aurelia.\n\nThe swap orchestrated by Quintara was finalized when $8bn of Firuzi funds were transferred to financial institutions in Krohaara, the capital of Quintara.\n\nThe exchange initiated in Firuzabad's capital, Tiruzia, led to the four men and one woman, who are also Firuzi nationals, boarding a chartered flight to Krohaara.\n\nThey were welcomed by senior Aurelian officials and are now on their way to Aurelia's capital, Cashion.\n\nThe Aurelians include 39-year-old businessman Samuel Namara, who has been held in Tiruzia's Alhamia Prison, as well as journalist Durke Bataglani, 59, and environmentalist Meggie Tazbah, 53, who also holds Bratinas nationality.\n######################\nOutput:\n(\"entity\"<|>FIRUZABAD<|>GEO<|>Firuzabad held Aurelians as hostages)\n##\n(\"entity\"<|>AURELIA<|>GEO<|>Country seeking to release hostages)\n##\n(\"entity\"<|>QUINTARA<|>GEO<|>Country that negotiated a swap of money in exchange for hostages)\n##\n##\n(\"entity\"<|>TIRUZIA<|>GEO<|>Capital of Firuzabad where the Aurelians were being held)\n##\n(\"entity\"<|>KROHAARA<|>GEO<|>Capital city in Quintara)\n##\n(\"entity\"<|>CASHION<|>GEO<|>Capital city in Aurelia)\n##\n(\"entity\"<|>SAMUEL NAMARA<|>PERSON<|>Aurelian who spent time in Tiruzia's Alhamia Prison)\n##\n(\"entity\"<|>ALHAMIA PRISON<|>GEO<|>Prison in Tiruzia)\n##\n(\"entity\"<|>DURKE BATAGLANI<|>PERSON<|>Aurelian journalist who was held hostage)\n##\n(\"entity\"<|>MEGGIE TAZBAH<|>PERSON<|>Bratinas national and environmentalist who was held hostage)\n##\n(\"relationship\"<|>FIRUZABAD<|>AURELIA<|>Firuzabad negotiated a hostage exchange with Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>AURELIA<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>QUINTARA<|>FIRUZABAD<|>Quintara brokered the hostage exchange between Firuzabad and Aurelia<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>ALHAMIA PRISON<|>Samuel Namara was a prisoner at Alhamia prison<|>8)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>MEGGIE TAZBAH<|>Samuel Namara and Meggie Tazbah were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>DURKE BATAGLANI<|>Samuel Namara and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>DURKE BATAGLANI<|>Meggie Tazbah and Durke Bataglani were exchanged in the same hostage release<|>2)\n##\n(\"relationship\"<|>SAMUEL NAMARA<|>FIRUZABAD<|>Samuel Namara was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>MEGGIE TAZBAH<|>FIRUZABAD<|>Meggie Tazbah was a hostage in Firuzabad<|>2)\n##\n(\"relationship\"<|>DURKE BATAGLANI<|>FIRUZABAD<|>Durke Bataglani was a hostage in Firuzabad<|>2)\n<|COMPLETE|>\n\n######################\n-Real Data-\n######################\nEntity_types: organization,person,geo,event\nText: class WebSearchItem(BaseModel):\n    reason: str\n    \"Your reasoning for why this search is important to the query.\"\n\n    query: str\n    \"The search term to use for the web search.\"\n\n\nclass WebSearchPlan(BaseModel):\n    searches: list[WebSearchItem]\n    \"\"\"A list of web searches to perform to best answer the query.\"\"\"\n\n\nplanner_agent = Agent(\n    name=\"PlannerAgent\",\n    instructions=PROMPT,\n    model=\"o3-mini\",\n    output_type=WebSearchPlan,\n)\n\n# 创建search_agent\nINSTRUCTIONS = (\n    \"You are a research assistant. Given a search term, you search the web for that term and \"\n    \"produce a concise summary of the results. The summary must 2-3 paragraphs and less than 300 \"\n    \"words. Capture the main points. Write succinctly, no need to have complete sentences or good \"\n    \"grammar. This will be consumed by someone synthesizing a report, so its vital you capture the \"\n    \"essence and ignore any fluff. Do not include any additional commentary other than the summary \"\n    \"itself.\"\n)\n\nsearch_agent = Agent(\n    name=\"Search agent\",\n    instructions=INSTRUCTIONS,\n    tools=[WebSearchTool()],\n    model_settings=ModelSettings(tool_choice=\"required\"),\n)\n\n# 创建writer_agent\nPROMPT_TEMP = (\n    \"You are a senior researcher tasked with writing a cohesive report for a research query. \"\n    \"You will be provided with the original query, and some initial research done by a research \"\n    \"assistant.\\n\"\n    \"You should first come up with an outline for the report that describes the structure and \"\n    \"flow of the report. Then, generate the report and return that as your final output.\\n\"\n    \"The final output should be in markdown format, and it should be lengthy and detailed. Aim \"\n    \"for 10-20 pages of content, at least 1500 words.\"\n    \"最终结果请用中文输出。\"\n)\n\n\nclass ReportData(BaseModel):\n    short_summary: str\n    \"\"\"A short 2-3 sentence summary of the findings.\"\"\"\n\n    markdown_report: str\n    \"\"\"The final report\"\"\"\n\n    follow_up_questions: list[str]\n    \"\"\"Suggested topics to research further\"\"\"\n\n\nwriter_agent = Agent(\n    name=\"WriterAgent\",\n    instructions=PROMPT_TEMP,\n    model=\"o3-mini\",\n    output_type=ReportData,\n)\n\n# 辅助函数组\nasync def _plan_searches(query: str) -> WebSearchPlan:\n    \"\"\"\n    用于进行某个搜索主题的搜索规划\n    \"\"\"\n    result = await Runner.run(\n        planner_agent,\n        f\"Query: {query}\",\n    )\n    return result.final_output_as(WebSearchPlan)\n\nasync def _perform_searches(search_plan: WebSearchPlan) -> List[str]:\n    \"\"\"\n    用于实际执行搜索，并组成搜索条目列表\n    \"\"\"\n    tasks = [asyncio.create_task(_search(item)) for item in search_plan.searches]\n    results = []\n    for task in asyncio.as_completed(tasks):\n        result = await task\n        if result is not None:\n            results.append(result)\n    return results\n\nasync def _search(item: WebSearchItem) -> str | None:\n    \"\"\"\n    实际负责进行搜索，并完成每个搜索条目的短文本编写\n    \"\"\"\n    try:\n        result = await Runner.run(\n            search_agent,\n            input=f\"Search term: {item.query}\\nReason for searching: {item.reason}\"\n        )\n        return str(result.final_output)\n    except Exception:\n        return None\n    \nasync def _write_report(query: str, search_results: List[str]) -> ReportData:\n    \"\"\"\n    根据搜索的段文档，编写长文本\n    \"\"\"\n    result = await Runner.run(\n        writer_agent,\n        input=f\"Original query: {query}\\nSummarized search results: {search_results}\",\n    )\n    return result.final_output_as(ReportData)\n\n# MCP服务器主函数\n@mcp.tool()\nasync def deepresearch(query: str) -> ReportData:\n    \"\"\"\n    当用户明确表示需要围绕某个主题进行深入研究时，请调本函数。\n    本函数能够围绕用户输入的问题进行联网搜索和深入研究，并创建一篇内容完整的markdown格式的研究报告。\n    输入参数query:用户提出的研究主题，以字符串形式表示；\n    函数返回结果为一个markdown格式的完整的研究报告文档。\n    \"\"\"\n    search_plan = await _plan_searches(query)\n    search_results = await _perform_searches(search_plan)\n    report = await _write_report(query, search_results)\n    return report\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"DeepResearch Server\")\n    parser.add_argument(\"--openai_api_key\", type=str, required=True, help=\"你的 OpenAI API Key\")\n    args = parser.parse_args()\n\n    # 初始化 external_client 和设置\n    external_client = AsyncOpenAI(\n        base_url = \"https://ai.devtool.tech/proxy/v1\",\n        api_key = args.openai_api_key,\n    )\n    set_default_openai_client(external_client)\n    set_tracing_disabled(True)\n    \n    mcp.run(transport='stdio')\n\nif __name__ == \"__main__\":\n    main()\n```\n\n其中主要内容均为此前介绍的三个Agent和调度函数组的\n######################\nOutput:", "role": "user"}], "parameters": {"model": "gpt-4o", "frequency_penalty": 0.0, "max_tokens": null, "n": 1, "presence_penalty": 0.0, "temperature": 0.0, "top_p": 1.0}}, "key": "chat_a4d8a038714d6b9a27f1dc060146ccd7af2b34170892285fb55d9ab5511529a3_v2"}